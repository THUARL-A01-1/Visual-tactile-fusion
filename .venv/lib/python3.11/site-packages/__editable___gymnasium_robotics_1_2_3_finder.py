from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'gymnasium_robotics': '/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics'}
NAMESPACES: dict[str, list[str]] = {'gymnasium_robotics.envs.assets': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets'], 'gymnasium_robotics.envs.multiagent_mujoco.assets': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/multiagent_mujoco/assets'], 'gymnasium_robotics.envs.assets.hand': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/hand'], 'gymnasium_robotics.envs.assets.textures': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/textures'], 'gymnasium_robotics.envs.assets.kitchen_franka': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka'], 'gymnasium_robotics.envs.assets.point': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/point'], 'gymnasium_robotics.envs.assets.fetch': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/fetch'], 'gymnasium_robotics.envs.assets.adroit_hand': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/adroit_hand'], 'gymnasium_robotics.envs.assets.stls': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls'], 'gymnasium_robotics.envs.assets.kitchen_franka.franka_assets': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/franka_assets'], 'gymnasium_robotics.envs.assets.kitchen_franka.kitchen_assets': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/kitchen_assets'], 'gymnasium_robotics.envs.assets.kitchen_franka.franka_assets.meshes': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/franka_assets/meshes'], 'gymnasium_robotics.envs.assets.kitchen_franka.franka_assets.meshes.visual': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/franka_assets/meshes/visual'], 'gymnasium_robotics.envs.assets.kitchen_franka.franka_assets.meshes.collision': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/franka_assets/meshes/collision'], 'gymnasium_robotics.envs.assets.kitchen_franka.kitchen_assets.textures': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/kitchen_assets/textures'], 'gymnasium_robotics.envs.assets.kitchen_franka.kitchen_assets.item_assets': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/kitchen_assets/item_assets'], 'gymnasium_robotics.envs.assets.kitchen_franka.kitchen_assets.meshes': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/kitchen_franka/kitchen_assets/meshes'], 'gymnasium_robotics.envs.assets.adroit_hand.resources': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/adroit_hand/resources'], 'gymnasium_robotics.envs.assets.adroit_hand.resources.textures': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/adroit_hand/resources/textures'], 'gymnasium_robotics.envs.assets.adroit_hand.resources.meshes': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/adroit_hand/resources/meshes'], 'gymnasium_robotics.envs.assets.stls.hand': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand'], 'gymnasium_robotics.envs.assets.stls.fetch': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/fetch'], 'gymnasium_robotics.envs.assets.stls.hand.right_f_distal_pst_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_f_distal_pst_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_lf_metacarpal_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_lf_metacarpal_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_f_middle_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_f_middle_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_th_middle_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_th_middle_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_palm_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_palm_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_f_proximal_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_f_proximal_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_th_distal_pst_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_th_distal_pst_split'], 'gymnasium_robotics.envs.assets.stls.hand.right_th_proximal_split': ['/Users/xiaokangsun/local_py_proj/Visual-tactile-fusion/tactile_envs/envs/Gymnasium-Robotics/gymnasium_robotics/envs/assets/stls/hand/right_th_proximal_split']}
PATH_PLACEHOLDER = '__editable__.gymnasium_robotics-1.2.3.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
